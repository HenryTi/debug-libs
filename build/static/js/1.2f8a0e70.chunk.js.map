{"version":3,"sources":["tonva-react-form/form/TonvaForm.tsx","tonva-react-form/dropDownActions/index.tsx","tonva-react-form/easyDate/index.tsx","tonva-react-form/media.tsx","tonva-react-form/searchBox.tsx","tonva-react-form/multiStep/index.tsx","tonva-react-form/list/base.tsx","tonva-react-form/list/clickable.tsx","tonva-react-form/list/static.tsx","tonva-react-form/list/selectable.tsx","tonva-react-form/list/list.tsx","tonva-react-form/list/index.ts","tonva-react-form/components/Badge.tsx","tonva-react-form/components/LMR.tsx","tonva-react-form/components/FA.tsx","tonva-react-form/components/IconText.tsx","tonva-react-form/components/Muted.tsx","tonva-react-form/components/index.ts","tonva-react-form/propGrid/row.tsx","tonva-react-form/propGrid/propView.tsx","tonva-react-form/propGrid/PropGrid.tsx","tonva-react-form/propGrid/index.tsx","tonva-react-form/listView/listRow.tsx","tonva-react-form/listView/listView.tsx","tonva-react-form/index.ts","tonva-react-form/uid.ts","tonva-react-form/form/control/control.tsx","tonva-react-form/form/control/buttonsControl.tsx","tonva-react-form/form/control/charsControl.tsx","tonva-react-form/form/control/stringControl.tsx","tonva-react-form/form/control/numberControl.tsx","tonva-react-form/form/control/unknownControl.tsx","tonva-react-form/form/control/pickIdControl.tsx","tonva-react-form/form/control/pickTuidControl.tsx","tonva-react-form/form/control/pickControl.tsx","tonva-react-form/form/control/index.ts","tonva-react-form/form/control/checkControl.tsx","tonva-react-form/form/control/radioControl.tsx","tonva-react-form/form/control/selectControl.tsx","tonva-react-form/form/control/textAreaControl.tsx","tonva-react-form/form/index.ts","tonva-react-form/form/rowContainer/index.tsx","tonva-react-form/form/formView.tsx"],"names":["TonvaForm","react__WEBPACK_IMPORTED_MODULE_0__","[object Object]","props","super","this","formView","_formView__WEBPACK_IMPORTED_MODULE_2__","setInitValues","initValues","className","children","undefined","render","onSubmit","__decorate","mobx_react__WEBPACK_IMPORTED_MODULE_1__","__webpack_require__","d","__webpack_exports__","EasyDate","date","Date","parse","now","tick","getTime","nDate","getDate","_date","hour","getHours","minute","getMinutes","month","getMonth","hm","getFullYear","Media","classnames__WEBPACK_IMPORTED_MODULE_1__","imgStyle","width","height","disp","icon","main","discription","px","py","img","src","alt","style","cn","SearchBox","onChange","evt","key","target","value","trim","setState","disabled","ref","input","initKey","__awaiter","preventDefault","onSearch","state","inputSize","lab","label","placeholder","buttonText","maxLength","size","type","name","base_ListBase","list","isPaged","items","Array","isArray","loading","pageItems","selectedItems","nextProps","item","index","react","JSON","stringify","mobx_module","clickable_Clickable","onClick","classnames","renderContent","static_Static","selectable_Selectable","console","log","itemsArray","compare","_items","_selectedItems","map","v","selected","labelId","Object","uid","find","si","buildItems","anySelected","some","onSelect","filter","checked","id","defaultChecked","e","flex","marginBottom","htmlFor","selectable_decorate","list_List","_$scroll","direct","listBase","nextState","nextContext","updateProps","header","footer","before","none","content","isLoading","staticRow","row","length","kv","classnames_default","list_decorate","index_module","Badge_Badge","b","badge","color","badgeAlign","badgeVertical","LMR_LMR","l","r","cursor","left","right","LMR_decorate","FA_FA","spin","fixWidth","border","pull","pulse","rotate","flip","inverse","IconText_IconText","iconClass","text","textClass","Muted","PropRow","values","row_PropBorder","borderTop","row_PropGap","param","w","backgroundColor","valueAlignStart","valueAlignCenter","valueAlignEnd","row_LabeledPropRow","gridProps","prop","bk","cursor-pointer","bg-white","renderLabel","renderProp","align","vAlign","col","full","alignValue","renderPropBody","renderPropContent","StringPropRow","NumberPropRow","row_ListPropRow","borderBottom","ComponentPropRow","component","propView_PropView","buildRows","rows","isGap","push","setValues","String","PropGrid_PropGrid","propView","listRow_ListRow","pressed","isIcon","noteNum","mid","viceSpan","vice","middle","midSize","unread","uv","get","va-action","listView_ListView","elHeader","beforeLoad","renderRow","itemClick","converter","ex","listItem","assign","listView_decorate","_form__WEBPACK_IMPORTED_MODULE_0__","o","_easyDate__WEBPACK_IMPORTED_MODULE_2__","_propGrid__WEBPACK_IMPORTED_MODULE_3__","_components__WEBPACK_IMPORTED_MODULE_4__","_media__WEBPACK_IMPORTED_MODULE_5__","_searchBox__WEBPACK_IMPORTED_MODULE_7__","_list__WEBPACK_IMPORTED_MODULE_10__","ALPHABET","ID_LENGTH","len","rtn","i","charAt","Math","floor","random","control_ControlBase","renderControl","hasError","filled","fieldName","error","validate","control_Control","field","face","init","setProps","element","rules","bind","defaultValue","clearErrors","clearValue","isOK","getValueFromElement","isOk","rule","err","message","n","notes","buttonsControl_ButtonsControl","otherClick","onOther","readValues","nothing","btnOther","submitButton","otherButton","TxtRequired","charsControl_CharsControl","required","parseValue","lodash","onBlur","onFocus","form-control","has-success","is-invalid","is-valid","renderInput","renderError","stringControl_StringControl","p","ErrInvalidNumber","ErrMin","ErrMax","KeyCode_Neg","KeyCode_Dot","unknownControl_UnknownControl","role","unknownControl_EmptyControl","pickIdControl_PickIdControl","pick","fromPicked","caption","onPicked","itemFromId","initCaption","ret","tuid","controlContent","ui","pickIdControl_decorate","pickTuidControl_PickTuidControl","onIdChanged","onFormValues","buildContent","pickTuidControl_decorate","pickControl_PickControl","pickControl_awaiter","view","Content","pickControl_decorate","createControl","form","group","groupRow","createGroupControl","fieldRow","fieldType","defaultFaces","f","controls","createFieldControl","help","string","password","number","extraChars","min","max","Number","parseFloat","isNaN","Error","step","onKeyPress","event","ch","charCode","indexOf","onKeyDot","onKeyNeg","replace","checkbox","trueValue","falseValue","radiobox","t","select","selectedIndex","selectedOptions","toLowerCase","options","default","pick-id","pick-tuid","textarea","el","int","dec","bool","_rule__WEBPACK_IMPORTED_MODULE_0__","_field__WEBPACK_IMPORTED_MODULE_1__","_face__WEBPACK_IMPORTED_MODULE_2__","_TonvaForm__WEBPACK_IMPORTED_MODULE_5__","bootstrapCreateRow","elementCreateRow","_control__WEBPACK_IMPORTED_MODULE_1__","RowContainer","cc","control","g","clear","setError","ElementRowContainer","BootStrapRowContainer","FormView","_uid__WEBPACK_IMPORTED_MODULE_2__","every","formRows","createRow","buildRow","readOnly","buttonsRow","createButtons","_rowContainer__WEBPACK_IMPORTED_MODULE_4__","formRow","formRowCreator","_control__WEBPACK_IMPORTED_MODULE_3__","buttons","mobx__WEBPACK_IMPORTED_MODULE_1__"],"mappings":"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","file":"static/js/1.2f8a0e70.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport {observer} from 'mobx-react';\r\nimport {FormView, FormProps} from './formView';\r\n\r\nexport function tonvaDebug() {\r\n    let a = 0;\r\n}\r\n\r\nexport interface TonvaFormProps extends FormProps {\r\n    className?: string;\r\n    initValues?: any;\r\n}\r\n\r\n@observer \r\nexport class TonvaForm extends React.Component<TonvaFormProps, {}> {\r\n    formView: FormView;\r\n    constructor(props:TonvaFormProps) {\r\n        super(props);\r\n        this.formView = new FormView(this.props);\r\n    }\r\n    componentWillMount() {\r\n        this.formView.setInitValues(this.props.initValues);\r\n    }\r\n    debug() {\r\n        let s = null;\r\n    }\r\n    render() {\r\n        let {className, children, initValues} = this.props;\r\n        return <div className={className}>\r\n            {\r\n                children === undefined? \r\n                    this.formView.render() : \r\n                    <form onSubmit={this.formView.onSubmit}>{children}</form>\r\n            }\r\n        </div>;\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport * as classNames from 'classnames';\r\nimport {ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem,\r\n    Row, Col, Button, Dropdown, UncontrolledDropdown, UncontrolledButtonDropdown} from 'reactstrap';\r\n\r\nexport interface Action {\r\n    icon?: string;\r\n    caption?: string;\r\n    action?: () => void;\r\n}\r\n\r\nexport interface DropdownActionsProps {\r\n    icon?: string;\r\n    actions: Action[];\r\n    isRight?: boolean;\r\n}\r\n\r\nexport interface DropdownActionsState {\r\n    dropdownOpen: boolean;\r\n}\r\n\r\nexport class DropdownActions extends React.Component<DropdownActionsProps, DropdownActionsState> {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            dropdownOpen: false\r\n        };\r\n    }\r\n    private toggle = () => {\r\n        this.setState({\r\n            dropdownOpen: !this.state.dropdownOpen\r\n        });\r\n    }\r\n    render() {\r\n        let {icon, actions, isRight} = this.props;\r\n        if (isRight === undefined) isRight = true;\r\n        let hasIcon = actions.some(v => v.icon!==undefined);\r\n        return <UncontrolledButtonDropdown isOpen={this.state.dropdownOpen} toggle={this.toggle}>\r\n            <DropdownToggle caret={true} size=\"sm\" className=\"cursor-pointer\">\r\n                <i className={classNames('fa', 'fa-'+(icon||'ellipsis-v'))} />\r\n            </DropdownToggle>\r\n            <DropdownMenu right={isRight}>\r\n                {actions.map((v,index) => {\r\n                    let {icon, caption, action} = v;\r\n                    if (icon === undefined && caption === undefined) \r\n                        return <div className=\"dropdown-divider\" />;\r\n                    let i;\r\n                    if (hasIcon === true) {\r\n                        if (icon !== undefined) icon = 'fa-' + icon;\r\n                        i = <><i className={classNames('fa', icon, 'fa-fw')} aria-hidden={true}/>&nbsp; </>;\r\n                    }\r\n                    if (action === undefined) \r\n                        return <h6 className=\"dropdown-header\">{i} {caption}</h6>;\r\n                    return <DropdownItem key={index} onClick={action}>{i} {caption}</DropdownItem>\r\n                })}\r\n            </DropdownMenu>\r\n        </UncontrolledButtonDropdown>\r\n    }\r\n}\r\n","import * as React from 'react';\r\n\r\nexport interface EasyDateProps {\r\n    date: Date | string;\r\n}\r\n\r\nexport class EasyDate extends React.Component<EasyDateProps> {\r\n    render() {\r\n        let {date} = this.props;\r\n        if (!date) return null;\r\n        let d = (typeof date === 'string')? new Date(Date.parse(date)) : date;\r\n        let now = new Date();\r\n        let tick = now.getTime() - d.getTime();\r\n        let nDate=now.getDate();\r\n        let _date=d.getDate(), hour=d.getHours(), minute=d.getMinutes(), month=d.getMonth()+1;\r\n        let hm = hour + ((minute<10?':0':':') + minute);\r\n        if (tick < -24*3600*1000) return d.getFullYear()+'年'+month+'月'+_date+'日 ' + hm;\r\n        if (tick < 24*3600*1000) {\r\n            return _date!==nDate? \r\n                (tick < 0? '明天 ' : '昨天 ') + hm \r\n                : hm;\r\n        }\r\n        if (tick < 365*24*3600*1000) {\r\n            return month+'月'+_date+'日 ';\r\n        }\r\n        return d.getFullYear()+'年'+month+'月'+_date+'日';\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport * as className from 'classnames';\r\nimport {observer} from 'mobx-react';\r\n\r\nexport interface MediaProps {\r\n    icon: string|JSX.Element;\r\n    main: string|JSX.Element;\r\n    discription?: string | JSX.Element;\r\n    px?: number;\r\n    py?: number;\r\n}\r\n\r\nconst imgStyle = {\r\n    width: '4rem',\r\n    height: '4rem',\r\n};\r\n\r\nexport class Media extends React.Component<MediaProps> {\r\n    render() {\r\n        let {icon, main, discription, px, py} = this.props;\r\n        let disp;\r\n        if (typeof discription === 'string')\r\n            disp = <div>{discription}</div>;\r\n        else\r\n            disp = discription;\r\n        let img = icon;\r\n        if (typeof icon === 'string')\r\n            img = <img className=\"d-flex mr-3\" src={icon} alt=\"img\" style={imgStyle} />;\r\n        let cn = className(\r\n            'media', \r\n            px===undefined? 'px-0':'px-'+px, \r\n            py===undefined? 'py-2':'py-'+py);\r\n        return <div className={cn}>\r\n            {img}\r\n            <div className=\"media-body\">\r\n                <h5 className=\"mt-0\">{main}</h5>\r\n                {disp}\r\n            </div>\r\n        </div>\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport * as classNames from 'classnames';\r\n\r\nexport interface SearchBoxProps {\r\n    className?: string;\r\n    label?: string;\r\n    initKey?: string;\r\n    placeholder?: string;\r\n    buttonText?: string;\r\n    maxLength?: number;\r\n    size?: 'sm' | 'md' | 'lg';\r\n    onSearch: (key:string)=>Promise<void>;\r\n}\r\n\r\nexport interface SearchBoxState {\r\n    disabled: boolean;\r\n}\r\n\r\nexport class SearchBox extends React.Component<SearchBoxProps, SearchBoxState> {\r\n    private input: HTMLInputElement;\r\n    private key: string;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            disabled: false,\r\n        }\r\n    }\r\n    onChange = (evt: React.ChangeEvent<any>) => {\r\n        this.key = evt.target.value;\r\n        if (this.key !== undefined) {\r\n            this.key = this.key.trim();\r\n        }\r\n        this.setState({disabled: !this.key});\r\n    }\r\n    ref = (input: HTMLInputElement) => {\r\n        this.input = input;\r\n        this.key = this.props.initKey || '';\r\n        if (input === null) return;\r\n        input.value = this.key;\r\n    }\r\n    onSubmit = async (evt: React.FormEvent<any>) => {\r\n        evt.preventDefault();\r\n        if (!this.key) return;\r\n        if (this.input) this.input.disabled = true;\r\n        await this.props.onSearch(this.key);\r\n        if (this.input) this.input.disabled = false;\r\n    }\r\n    render() {\r\n        let {className, label, placeholder, buttonText, maxLength, size} = this.props;\r\n        let inputSize;\r\n        switch (size) {\r\n            default:\r\n            case 'sm': inputSize = 'input-group-sm'; break;\r\n            case 'md': inputSize = 'input-group-md'; break;\r\n            case 'lg': inputSize = 'input-group-lg'; break;\r\n        }\r\n        let lab;\r\n        if (label !== undefined) lab = <label className=\"input-group-addon\">{label}</label>;\r\n        return <form className={className} onSubmit={this.onSubmit} >\r\n            <div className={classNames(\"input-group\", inputSize)}>\r\n                {lab}\r\n                <input onChange={this.onChange} \r\n                    type=\"text\" \r\n                    name=\"key\"\r\n                    ref={this.ref}\r\n                    className=\"form-control\" \r\n                    placeholder={placeholder}\r\n                    maxLength={maxLength} />\r\n                <div className=\"input-group-append\">\r\n                    <button className=\"btn btn-primary\"\r\n                        type=\"submit\"\r\n                        disabled={this.state.disabled}>\r\n                        <i className='fa fa-search' />\r\n                        <i className=\"fa\"/>\r\n                        {buttonText}\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </form>;\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport * as _ from 'lodash';\r\nimport * as className from 'classnames';\r\nimport {Button} from 'reactstrap';\r\nimport {FormProps, FormRow, SubmitResult, FormView, TonvaForm} from '../form';\r\n\r\nexport interface Step {\r\n    formRows: FormRow[];\r\n    next: undefined | string | ((values:any) => string);    // 返回下一步的step名称或者直接就是名称\r\n    ex?: any;                                   // 每一步额外的参数\r\n}\r\n\r\nexport interface MultiStepProps {\r\n    className?: string;\r\n    header?: (step:Step, num:number) => JSX.Element; //name: step name, num: 第几步，1开始\r\n    footer?: (step:Step, num:number) => JSX.Element; //name: step name, num: 第几步，1开始\r\n    steps: {[name:string]: Step};\r\n    first: string;         // 第一步的名字\r\n    onSubmit: (values:any) => Promise<SubmitResult|undefined>;\r\n    submitButton?: string|JSX.Element;\r\n}\r\n\r\nexport interface StepView {\r\n    stepName: string;\r\n    step: Step;\r\n    props: FormProps;\r\n    //view: JSX.Element;\r\n}\r\nexport interface MultiStepState {\r\n    //num: number;\r\n    //step: Step;\r\n    //formView: FormView;\r\n    topView: StepView;\r\n    stepViews: StepView[];\r\n}\r\n\r\nexport class MultiStep extends React.Component<MultiStepProps, MultiStepState> {\r\n    private values: any = {};\r\n    private stepViews: StepView[] = [];\r\n    private topView: StepView;\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            topView: undefined,\r\n            stepViews: [],\r\n        }\r\n        this.onPrev = this.onPrev.bind(this);\r\n        this.onNext = this.onNext.bind(this);\r\n    }\r\n    \r\n    private setStep(stepName: string) {\r\n        let step = this.props.steps[stepName];\r\n        if (step === undefined) return; //throw new Error('Unknown step name: ' + stepName);\r\n        if (this.topView !== undefined) this.stepViews.push(this.topView);\r\n        let otherButton, onOther;\r\n        if (this.stepViews.length > 0) {\r\n            otherButton = <ButtonConten prefix=\"undo\" text=\"上一步\" />;\r\n            onOther = this.onPrev;\r\n        }\r\n        let {header, footer} = this.props;\r\n        let btnContent = step.next === undefined?\r\n            {prefix: 'cloud-upload', text: this.props.submitButton || '提交'} :\r\n            {suffix: 'arrow-right', text: '下一步'}\r\n        let formProps = {\r\n            formRows: step.formRows,\r\n            submitButton: <ButtonConten {...btnContent} />,\r\n            onSubmit: this.onNext,\r\n            otherButton: otherButton,\r\n            onOther: onOther,\r\n        };\r\n        let num = this.stepViews.length + 1;\r\n        this.topView = {\r\n            stepName: stepName,\r\n            step: step,\r\n            props: formProps,\r\n        };\r\n        this.setState({\r\n            topView: this.topView,\r\n            stepViews: this.stepViews\r\n        });\r\n    }\r\n    componentWillMount() {\r\n        this.setStep(this.props.first);\r\n    }\r\n    private onPrev(values:any) {\r\n        _.assign(this.values, values);\r\n        this.topView = this.stepViews.pop();\r\n        this.setState({\r\n            topView: this.topView,\r\n            stepViews: this.stepViews\r\n        });\r\n    }\r\n    private onNext(values:any): Promise<SubmitResult|undefined> {\r\n        _.assign(this.values, values);\r\n        //let {num, step} = this.state;\r\n        let {next} = this.topView.step;\r\n        if (next === undefined) {\r\n            return this.props.onSubmit(this.values)\r\n        }\r\n        let nextStepName:string;\r\n        if (typeof next === 'string') {\r\n            nextStepName = next;\r\n        }\r\n        else {\r\n            nextStepName = next(this.values);\r\n        }\r\n        this.setStep(nextStepName);\r\n    }\r\n    render() {\r\n        let {className, header, footer} = this.props;\r\n        let {topView, stepViews} = this.state;\r\n        let {stepName, step} = topView;\r\n        let hidden = {visibility: 'hidden'};\r\n        let num = stepViews.length + 1;\r\n        return <div className={className}>\r\n            <div>\r\n                {header && header(step, num)}\r\n                <TonvaForm key={stepName} initValues={this.values} {...topView.props} />\r\n                {footer && footer(step, num)}\r\n            </div>\r\n        </div>;\r\n    }\r\n}\r\n\r\nconst ButtonConten = (props:{prefix?:string, text?:string|JSX.Element, suffix?:string}) => {\r\n    let {prefix, text, suffix} = props;\r\n    let pIcon, sIcon;\r\n    if (prefix !== undefined) pIcon = <i className={className('fa', 'fa-' + prefix)} />;\r\n    if (suffix !== undefined) sIcon = <i className={className('fa', 'fa-' + suffix)} />;\r\n    return <React.Fragment>{pIcon} {props.text} {sIcon}</React.Fragment>;\r\n}\r\n    \r\n","import * as React from 'react';\r\nimport {List} from './list';\r\nimport { IObservableArray, computed } from 'mobx';\r\nimport { PageItems } from 'tonva-tools';\r\n\r\nexport abstract class ListBase {\r\n    protected list: List;\r\n    constructor(list: List) {\r\n        this.list = list;\r\n    }\r\n    get isPaged():boolean {\r\n        let items = this.list.props.items;\r\n        return (items !== null && items !== undefined && Array.isArray(items) === false);\r\n    }\r\n    get items():any[]|IObservableArray<any> {\r\n        let items = this.list.props.items;\r\n        if (items === null) return null;\r\n        if (items === undefined) return undefined;\r\n        if (Array.isArray(items) === true)\r\n            return items as IObservableArray<any>;\r\n        else\r\n            return (items as PageItems<any>).items;\r\n    }\r\n    @computed get loading():boolean {\r\n        let items = this.list.props.items;\r\n        if (items === null) return false;\r\n        if (items === undefined) return true;\r\n        let pageItems = items as PageItems<any>;\r\n        if (pageItems.items === undefined) return false;\r\n        return pageItems.loading;\r\n    }\r\n    get selectedItems():any[] { return; }\r\n    updateProps(nextProps:any) {}\r\n    abstract render(item:any, index:number):JSX.Element;\r\n    protected renderContent(item:any, index:number) {\r\n        let {render} = this.list.props.item;\r\n        if (render === undefined) return <div className=\"px-3 py-2\">{JSON.stringify(item)}</div>;\r\n        return render(item, index);\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport * as classNames from 'classnames';\r\nimport {ListBase} from './base';\r\n\r\nexport class Clickable extends ListBase {\r\n    render(item:any, index:number):JSX.Element {\r\n        let {className, onClick} = this.list.props.item;\r\n        return <li className={classNames('va-row-clickable', className)} onClick={()=>onClick(item)}>\r\n            {this.renderContent(item, index)}\r\n        </li>\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport * as classNames from 'classnames';\r\nimport {ListBase} from './base';\r\nimport { uid } from '../uid';\r\n\r\nexport class Static extends ListBase {\r\n    render(item:any, index:number):JSX.Element {\r\n        let {className, key, render} = this.list.props.item;\r\n        if (typeof item === 'string') {\r\n            let cn = classNames('va-list-gap', 'px-3', 'pt-1');\r\n            return <li className={cn}>{item}</li>;\r\n        }\r\n        return <li className={classNames(className)}>\r\n            {this.renderContent(item, index)}\r\n        </li>\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport {observable, computed, IObservableArray} from 'mobx';\r\nimport * as classNames from 'classnames';\r\nimport {ListBase} from './base';\r\nimport {uid} from '../uid';\r\nimport { PageItems } from 'tonva-tools';\r\n\r\nexport interface SelectableItem {\r\n    selected: boolean;\r\n    item: any;\r\n    labelId: string;\r\n}\r\n\r\nexport class Selectable extends ListBase {\r\n    private _items: SelectableItem[];\r\n    private _selectedItems: any[];\r\n    private input: HTMLInputElement;\r\n    private buildItems() {\r\n        console.log('buildItems in selectable.tsx');\r\n        let {items, selectedItems, compare} = this.list.props;\r\n        let itemsArray:any[] | IObservableArray<any>;\r\n        if (items === undefined) {\r\n            return this._items = undefined;\r\n        }\r\n        if (items === null) {\r\n            return this._items = null;\r\n        }\r\n        if (Array.isArray(items) === true) {\r\n            itemsArray = items as any;\r\n        }\r\n        else {\r\n            itemsArray = (items as PageItems<any>).items;\r\n        }\r\n        //let items = this.items;\r\n        this._selectedItems = selectedItems;\r\n        if (selectedItems === undefined) {\r\n            return this._items = itemsArray.map(v => {\r\n                return {\r\n                    selected:false, \r\n                    item:v, \r\n                    labelId:uid()\r\n                };\r\n            });\r\n        }\r\n        if (compare === undefined) {\r\n            return this._items = itemsArray.map(v => {\r\n                return {\r\n                    selected:selectedItems.find(si => si === v) !== undefined, \r\n                    item:v, \r\n                    labelId:uid()\r\n                };\r\n            });\r\n        }\r\n        return this._items = itemsArray.map(v => {\r\n            return {\r\n                selected:selectedItems.find(si => compare(v, si)) !== undefined, \r\n                item:v, \r\n                labelId:uid()\r\n            };\r\n        });\r\n    }\r\n    @computed get items() {\r\n        //if (this._items === undefined) \r\n        this.buildItems();\r\n        return this._items;\r\n    }\r\n    updateProps(nextProps:any) {\r\n        if (nextProps.selectedItems === this._selectedItems) return;\r\n        this.buildItems();\r\n    }\r\n    private onSelect(item:SelectableItem, selected:boolean) {\r\n        item.selected = selected;\r\n        let anySelected = this._items.some(v => v.selected);\r\n        this.list.props.item.onSelect(item.item, selected, anySelected);\r\n    }\r\n    \r\n    get selectedItems():any[] {\r\n        return this._items.filter(v => v.selected === true).map(v => v.item);\r\n    }\r\n    /*\r\n    set selectedItems(value: any[]) {\r\n        if (value === undefined) return;\r\n        if (this._items === undefined) return;\r\n        let sLen = this._items.length;\r\n        let list = value.slice();\r\n        for (let n=0; n<sLen; n++) {\r\n            let sItem = this._items[n];\r\n            let len = list.length;\r\n            if (len === 0) break;\r\n            let item = sItem.item;\r\n            for (let i=0; i<len; i++) {\r\n                let v = list[i];\r\n                if (item === v) {\r\n                    sItem.selected = true;\r\n                    value.splice(i, 1);\r\n                    break;\r\n                }\r\n            }\r\n        };\r\n    }\r\n    */\r\n    //w-100 mb-0 pl-3\r\n    //m-0 w-100\r\n    render(item:SelectableItem, index:number):JSX.Element {\r\n        let {className, key, render, onSelect} = this.list.props.item;\r\n        let {labelId, selected} = item;\r\n        return <li className={classNames(className)}>\r\n            <div className=\"d-flex align-items-center px-3\">\r\n                <input ref={input=>{\r\n                        if (!input) return;\r\n                        this.input = input; input.checked = selected;\r\n                    }}\r\n                    className=\"\" type=\"checkbox\" value=\"\" id={labelId}\r\n                    defaultChecked={selected}\r\n                    onChange={(e)=>{\r\n                        this.onSelect(item, e.target.checked)} \r\n                    }/>\r\n                <label className=\"\" style={{flex:1, marginBottom:0}} htmlFor={labelId}>\r\n                    {this.renderContent(item.item, index)}\r\n                </label>\r\n            </div>\r\n        </li>\r\n    }\r\n}\r\n/*\r\n<label>\r\n<label className=\"custom-control custom-checkbox\">\r\n    <input type='checkbox' className=\"custom-control-input\"\r\n        //checked={selected}\r\n        onChange={(e)=>this.onSelect(item, e.target.checked)} />\r\n    <span className=\"custom-control-indicator\" />\r\n</label>\r\n{this.renderContent(item.item, index)}\r\n</label>\r\n*/\r\n","import * as React from 'react';\r\nimport classNames from 'classnames';\r\nimport {observer} from 'mobx-react';\r\nimport {PageItems} from 'tonva-tools';\r\nimport {ListBase} from './base';\r\nimport {Clickable} from './clickable';\r\nimport {Static} from './static';\r\nimport {Selectable} from './selectable';\r\nimport \"../css/va-list.css\";\r\nimport { IObservableArray } from 'mobx';\r\n\r\nexport type StaticRow = string|JSX.Element|(()=>string|JSX.Element);\r\n\r\nexport interface ListProps {\r\n    className?: string|string[];\r\n    items: any[] | IObservableArray<any> | PageItems<any>;\r\n    item: {\r\n        className?: string|string[];\r\n        render?: (item:any, index:number) => JSX.Element;\r\n        onSelect?: (item:any, isSelected:boolean, anySelected:boolean)=>void;\r\n        onClick?: (item:any)=>void;\r\n        key?: (item:any)=>string;\r\n    };\r\n    compare?:(item:any, selectItem)=>boolean;\r\n    selectedItems?:any[];\r\n    header?: StaticRow;\r\n    footer?: StaticRow;\r\n    before?: StaticRow;\r\n    loading?: StaticRow;\r\n    none?: StaticRow;\r\n}\r\n\r\n@observer\r\nexport class List extends React.Component<ListProps> {\r\n    private listBase: ListBase;\r\n    constructor(props:ListProps) {\r\n        super(props);\r\n        let {item} = this.props;\r\n        let {onClick, onSelect} = item;\r\n        if (onSelect !== undefined)\r\n            this.listBase = new Selectable(this);\r\n        else if (onClick !== undefined)\r\n            this.listBase = new Clickable(this);\r\n        else\r\n            this.listBase = new Static(this);\r\n    }\r\n    _$scroll = (direct: 'top'|'bottom') => {\r\n        console.log('############### items scroll to ' + direct);\r\n    }\r\n    componentWillUpdate(nextProps:ListProps, nextState, nextContext) {\r\n        this.listBase.updateProps(nextProps);\r\n    }\r\n    get selectedItems():any[] {\r\n        return this.listBase.selectedItems;\r\n    }\r\n    render() {\r\n        let {className, header, footer, before, loading, none, item, selectedItems} = this.props;\r\n        if (before === undefined) before = 'before';\r\n        if (loading === undefined) loading = 'loading';\r\n        if (none === undefined) none = 'none';        \r\n        //this.listBase.selectedItems = selectedItems;\r\n        let {isPaged, items, loading:isLoading} = this.listBase;\r\n        function staticRow(row:StaticRow, type:string) {\r\n            if (!row) return;\r\n            switch (typeof row) {\r\n                default:\r\n                case 'string': return <li className={\"va-list-\"+type}>{row}</li>;\r\n                case 'function': return <li className={\"va-list-\"+type}>{(row as ()=>string|JSX.Element)()}</li>;\r\n                case 'object': return <li>{row}</li>\r\n            } \r\n        }\r\n        let content:any;\r\n        if (items === null)\r\n            content = staticRow(before, 'before');\r\n        else if (items === undefined)\r\n            content = staticRow(loading, 'loading');\r\n        else if (items.length === 0)\r\n            content = staticRow(none, 'none');\r\n        else {\r\n            let {key} = this.props.item;\r\n            content = items.map((item, index) => {\r\n                let kv = key===undefined?index:key(item);\r\n                return <React.Fragment key={kv}>\r\n                    {this.listBase.render(item, index)}\r\n                </React.Fragment>;\r\n            });\r\n        }\r\n        return <ul className={classNames('va-list', className)}>\r\n            {staticRow(header, 'header')}\r\n            {content}\r\n            {staticRow(footer, 'footer')}\r\n        </ul>;\r\n    }\r\n}\r\n","//export {List, ListProps} from './list';\r\n\r\nexport * from './list';\r\n","import * as React from 'react';\r\nimport {observer} from 'mobx-react';\r\nimport * as classNames from 'classnames';\r\nimport '../css/va-badge.css';\r\n\r\nexport interface BadgeProps {\r\n    className?: string;\r\n    badge?: string|number;\r\n    size?: 'sm'|'lg';\r\n    color?: 'secondary'|'success'|'danger'|'primary'|'info'|'warning';\r\n    badgeAlign?: 'left'|'center'|'right';\r\n    badgeVertical?: 'top'|'middle'|'bottom';\r\n}\r\n\r\n@observer\r\nexport class Badge extends React.Component<BadgeProps> {\r\n    render() {\r\n        let {className, badge, size, color, badgeAlign, badgeVertical, children} = this.props;\r\n        let cn = classNames(\r\n            className,\r\n            'va-badge',\r\n            size && 'va-badge-'+size,\r\n            'va-badge-' + (color||'secondary'),\r\n            badgeAlign && 'va-badg-'+badgeAlign,\r\n            badgeVertical && 'va-badg-'+badgeVertical,\r\n        );\r\n        let b;\r\n        if (badge) b = <b>{badge}</b>;\r\n        return <div className={cn}>\r\n            {children}\r\n            {b}\r\n        </div>;\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport {observer} from 'mobx-react';\r\nimport * as classNames from 'classnames';\r\nimport '../css/va-lmr.css';\r\n\r\nexport interface LMRProps {\r\n    className?: string | string[];\r\n    left?: string|JSX.Element;\r\n    right?: string|JSX.Element;\r\n    onClick?: ()=>void;\r\n}\r\n\r\n@observer\r\nexport class LMR extends React.Component<LMRProps> {\r\n    render() {\r\n        let {className, left, children, right, onClick} = this.props;\r\n        let l, r;\r\n        if (left !== undefined) l = <header>{left}</header>;\r\n        if (right !== undefined) r = <footer>{right}</footer>;\r\n        let cursor;\r\n        if (onClick !== undefined) cursor = 'cursor-pointer';\r\n        return <div className={classNames('va-lmr', className, cursor)} onClick={onClick}>\r\n            {l}\r\n            <div>{children}</div>\r\n            {r}\r\n        </div>;\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport * as classNames from 'classnames';\r\n\r\nexport interface FAProps {\r\n    name: string;\r\n    className?: string;\r\n    size?: 'lg'|'2x'|'3x'|'4x'|'5x';\r\n    spin?: boolean;\r\n    fixWidth?: boolean;\r\n    border?: boolean;\r\n    pull?: 'left'|'right';\r\n    pulse?: boolean;\r\n    rotate?: 90|180|270;\r\n    flip?: 'horizontal'|'vertical';\r\n    inverse?: boolean;\r\n}\r\n\r\nexport class FA extends React.Component<FAProps> {\r\n    render() {\r\n        let {name, className, size, spin, fixWidth, border, pull, pulse, rotate, flip, inverse} = this.props;\r\n        let cn = classNames(className, 'fa',\r\n            name && ('fa-' + name),\r\n            size && 'fa-'+size,\r\n            fixWidth && 'fa-fw',\r\n            border && 'fa-border',\r\n            pull && 'fa-pull-' + pull,\r\n            spin && 'fa-spin',\r\n            pulse && 'fa-pulse',\r\n            rotate && 'fa-rotate-' + rotate,\r\n            flip && 'fa-flip-' + flip,\r\n            inverse && 'fa-inverse',\r\n        );\r\n        return <i className={cn} />\r\n    }\r\n}\r\n\r\nexport interface StackedFAProps {\r\n    className?: string;\r\n    size?: 'lg',\r\n}\r\nexport class StackedFA extends React.Component<StackedFAProps> {\r\n    render() {\r\n        let {className, size, children} = this.props;\r\n        let cn = classNames(\r\n            'fa-stack',\r\n            className,\r\n            size && 'fa-' + size);\r\n        return <span className={cn}>\r\n            {children}\r\n        </span>;\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport {FA} from './FA';\r\n\r\nexport interface IconTextProps {\r\n    icon: string;\r\n    iconClass?: string;\r\n    text: string;\r\n    textClass?: string;\r\n}\r\n\r\nexport class IconText extends React.Component<IconTextProps> {\r\n    render() {\r\n        let {icon, iconClass, text, textClass} = this.props;\r\n        return <div className=\"py-2\">\r\n            <FA className={iconClass} name={icon} fixWidth={true} />\r\n            <span className={textClass}>{text}</span>\r\n        </div>;\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport * as classNames from 'classnames';\r\n\r\nexport const Muted = (props:any) => \r\n<small className={classNames('text-muted', props.className)} style={props.style}>\r\n    {props.children}\r\n</small>;\r\n","export * from './Badge';\r\nexport * from './LMR';\r\nexport * from './FA';\r\nexport * from './IconText';\r\nexport * from './Muted';","import * as React from 'react';\r\nimport {observer} from 'mobx-react';\r\nimport * as className from 'classnames';\r\nimport {ListView} from '../listView';\r\nimport {PropGridProps} from './PropGrid';\r\nimport {LabeledProp, StringProp, NumberProp, ListProp, ComponentProp} from './propView';\r\n\r\nexport abstract class PropRow {\r\n    setValues(values: any) {}\r\n    abstract render(key:string): any;\r\n}\r\n\r\nexport class PropBorder extends PropRow {\r\n    render(key:string): JSX.Element {\r\n        return <div key={'_b_' + key} className=\"\">\r\n            <div className=\"col-sm-12\">\r\n                <div style={{borderTop: '1px solid #f0f0f0'}} />\r\n            </div>\r\n        </div>;\r\n    }\r\n}\r\n\r\nexport class PropGap extends PropRow {\r\n    private param: string;\r\n    constructor(param?: string) {\r\n        super();\r\n        this.param = param;\r\n    }\r\n    render(key:string): JSX.Element {\r\n        let w: string;\r\n        switch (this.param) {\r\n            default: w = 'py-2'; break;\r\n            case '=': w = 'py-1'; break;\r\n            case '-': w = 'pb-1'; break;\r\n        }\r\n        let cn = className(w);\r\n        return <div key={'_g_' + key} className={cn} style={{backgroundColor: '#f0f0f0'}} />;\r\n    }\r\n}\r\n\r\nconst valueAlignStart = 'justify-content-start';\r\nconst valueAlignCenter = 'justify-content-center';\r\nconst valueAlignEnd = 'justify-content-end';\r\nexport abstract class LabeledPropRow extends PropRow {\r\n    protected gridProps: PropGridProps;\r\n    protected prop: LabeledProp;\r\n    protected content: any;\r\n    //protected values: any;\r\n    constructor(gridProps:PropGridProps, prop: LabeledProp) {\r\n        super();\r\n        this.gridProps = gridProps;\r\n        this.prop = prop;\r\n        //this.values = values;\r\n    }\r\n    render(key:string):any {\r\n        let {onClick, bk} = this.prop;\r\n        let cn = className({\r\n            \"cursor-pointer\": onClick !== undefined,\r\n            \"bg-white\": bk === undefined, \r\n            \"row\": true\r\n        });\r\n        return <div key={key} className={cn} onClick={onClick}>\r\n            {this.renderLabel()}\r\n            {this.renderProp()}\r\n        </div>;\r\n    }\r\n    protected renderLabel():any {\r\n        let {label} = this.prop;\r\n        if (label === undefined) return null;\r\n        return <label className=\"col-sm-2 col-form-label\">\r\n            {label}\r\n        </label>;\r\n    }\r\n    protected renderProp():any {\r\n        let {label, full} = this.prop as any;\r\n        let align, vAlign;\r\n        switch (this.gridProps.alignValue) {\r\n            case 'left': align = valueAlignStart; break;\r\n            case 'center': align = valueAlignCenter; break;\r\n            case 'right': align = valueAlignEnd; break;\r\n        }\r\n        switch (this.prop.vAlign) {\r\n            case 'top': vAlign = 'align-items-start'; break;\r\n            default:\r\n            case 'center': vAlign = 'align-items-center'; break;\r\n            case 'bottom': vAlign = 'align-items-end'; break;\r\n            case 'stretch': vAlign = 'align-items-stretch'; break;\r\n        }\r\n        let col:string;\r\n        if (full !== true)\r\n            col = label===undefined? 'col-sm-12':'col-sm-10';\r\n        else\r\n            col = 'w-100';\r\n        let cn = className(align, vAlign, col, 'd-flex');\r\n        return <div className={cn}>\r\n            {this.renderPropBody()}\r\n        </div>;\r\n    }\r\n    protected renderPropBody():any {\r\n        return <div className=\"form-control-plaintext\">\r\n            {this.renderPropContent()}\r\n        </div>;\r\n    }\r\n    protected renderPropContent():any {\r\n        return this.content;\r\n    }\r\n}\r\n\r\nexport class StringPropRow extends LabeledPropRow {\r\n    protected prop: StringProp;\r\n    setValues(values:any) {\r\n        if (values === undefined) this.content = undefined;\r\n        else this.content = values[this.prop.name];\r\n    }\r\n}\r\n\r\nexport class NumberPropRow extends LabeledPropRow {\r\n    protected prop: NumberProp;\r\n    setValues(values:any) {\r\n        if (values === undefined) this.content = undefined;\r\n        else this.content = values[this.prop.name];\r\n    }\r\n}\r\n\r\nexport class ListPropRow extends LabeledPropRow {\r\n    protected prop: ListProp;\r\n    setValues(values:any) {\r\n        if (values === undefined) this.content = undefined;\r\n        else {\r\n            let list = this.prop.list;\r\n            if (typeof list === 'string') this.content = values[list];\r\n            else this.content = undefined;\r\n        }\r\n    }\r\n    protected renderPropBody() {\r\n        let {list, row} = this.prop;\r\n        let items:any[] = typeof list === 'string'? this.content : list;\r\n        if (items === undefined) return <div/>;\r\n        // new row(item)\r\n        return <div className=\"w-100\">\r\n            {items.map((item, index) => <React.Fragment key={index}>\r\n                {index===0? null: <div style={{width:'100%', borderBottom:'1px solid #f0f0f0'}} />}\r\n                {React.createElement(row, item)}\r\n            </React.Fragment>)}\r\n        </div>;\r\n    }\r\n}\r\n\r\nexport class ComponentPropRow extends LabeledPropRow {\r\n    protected prop: ComponentProp;\r\n    protected renderPropBody() {\r\n        let {component} = this.prop;\r\n        return component;\r\n    }\r\n}\r\n\r\nexport class PropContainer extends PropRow {\r\n    render(key:string): JSX.Element {\r\n        return <div className=\"bg-white\">\r\n            <label className=\"col-sm-2 col-form-label\">\r\n                AAABBBCCC\r\n            </label>\r\n            <div className=\"col-sm-10\">\r\n                <div className=\"form-control-plaintext\">\r\n                    dsfasfa sdf asdf a\r\n                </div>\r\n            </div>\r\n        </div>;\r\n    }\r\n}\r\n","import {ListViewProps} from '../listView';\r\nimport {PropGridProps} from './PropGrid';\r\nimport {PropRow, PropBorder, PropGap, PropContainer,\r\n    StringPropRow, NumberPropRow, ListPropRow, ComponentPropRow} from './row';\r\n\r\nexport interface Format {\r\n\r\n}\r\n\r\nexport interface PropBase {\r\n    onClick?: ()=>void;\r\n}\r\n\r\nexport interface LabeledProp extends PropBase {\r\n    label?: string;\r\n    bk?: string;\r\n    vAlign?: 'top'|'bottom'|'center'|'stretch';\r\n}\r\n\r\nexport interface StringProp extends LabeledProp {\r\n    type: 'string';\r\n    name: string;\r\n}\r\n\r\nexport interface NumberProp extends LabeledProp {\r\n    type: 'number';\r\n    name: string;\r\n}\r\n\r\nexport interface FormatProp extends LabeledProp {\r\n    type: 'format';\r\n    format: Format;\r\n}\r\n\r\nexport interface ListProp extends LabeledProp {\r\n    type: 'list';\r\n    list: string | any[];  // string 表示名字，否则就是值\r\n    row: new (props:any) => React.Component;\r\n}\r\n\r\nexport interface ComponentProp extends LabeledProp {\r\n    type: 'component';\r\n    full?: boolean;\r\n    component: any; //JSX.Element;\r\n}\r\n\r\nexport type Prop = StringProp | NumberProp | FormatProp | ListProp | ComponentProp | string;\r\n\r\nexport class PropView {\r\n    private gridProps:PropGridProps\r\n    private props: Prop[];\r\n    //private values:any;\r\n    private rows: PropRow[];\r\n\r\n    constructor(gridProps:PropGridProps, props:Prop[]) {\r\n        this.gridProps = gridProps;\r\n        this.props = props;\r\n        //this.values = values;\r\n        this.buildRows();\r\n    }\r\n\r\n    private buildRows() {\r\n        this.rows = [];\r\n        let isGap:boolean = true;\r\n        for (let prop of this.props) {\r\n            if (typeof prop === 'string') {\r\n                this.rows.push(new PropGap(prop));\r\n                isGap = true;\r\n            }\r\n            else {\r\n                if (!isGap) this.rows.push(new PropBorder());\r\n                let row;\r\n                switch (prop.type) {\r\n                    default: continue;\r\n                    case 'string': row = new StringPropRow(this.gridProps, prop); break;\r\n                    case 'number': row = new NumberPropRow(this.gridProps, prop); break;\r\n                    case 'list': row = new ListPropRow(this.gridProps, prop); break;\r\n                    case 'component': row = new ComponentPropRow(this.gridProps, prop); break;\r\n                }\r\n                this.rows.push(row);\r\n                isGap = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    setValues(values: any) {\r\n        for (let r of this.rows) r.setValues(values);\r\n    }\r\n\r\n    render() {\r\n        return this.rows.map((row, index) => row.render(String(index)));\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport * as classNames from 'classnames';\r\nimport {observer} from 'mobx-react';\r\nimport {Prop, PropView} from './propView';\r\nimport {PropContainer, PropBorder, PropGap} from './row';\r\n\r\nexport interface PropGridProps {\r\n    className?: string;\r\n    rows: Prop[];\r\n    values: any;\r\n    alignValue?: 'left'|'center'|'right';\r\n}\r\n\r\n@observer\r\nexport class PropGrid extends React.Component<PropGridProps> {\r\n/*\r\n    private propView: PropView;\r\n    constructor(props:PropGridProps) {\r\n        super(props);\r\n    }\r\n*/\r\n/*\r\n    componentWillMount() {\r\n        this.propView = new PropView(this.props.rows);\r\n        this.propView.setValues(this.props.values);\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps: Readonly<PropGridProps>, nextContext: any) {\r\n        this.propView = new PropView(this.props.rows);\r\n        this.propView.setValues(nextProps.values);\r\n        this.forceUpdate();\r\n    }\r\n*/\r\n    render() {\r\n        let {className, rows, values} = this.props;\r\n        let propView = new PropView(this.props, rows);\r\n        propView.setValues(values);\r\n        let cn = classNames('container-fluid', className);\r\n        return <div className={cn}>\r\n            {propView.render()}\r\n        </div>;\r\n    }\r\n}\r\n","export * from './propView';\r\nexport * from './row';\r\nexport * from './PropGrid';\r\n","import * as React from 'react';\r\nimport * as classNames from 'classnames';\r\nimport {IObservableValue, IComputedValue} from 'mobx';\r\nimport {observer} from 'mobx-react';\r\nimport '../css/va-row.css';\r\n\r\nexport interface ListItem {\r\n    key?: string|number;\r\n    date?: Date;\r\n    icon?: string | JSX.Element;\r\n    main?: string;\r\n    vice?: string;\r\n    middle?: string | JSX.Element;\r\n    midSize?: number;\r\n    right?: string | JSX.Element;\r\n    onClick?: () => void;\r\n    unread?: number|IComputedValue<number>;         // <0 表示red dot\r\n}\r\n\r\nexport interface ListRowProps extends ListItem {\r\n    //onClick: () => void;\r\n}\r\n\r\nexport interface ListRowState {\r\n    pressed: boolean;\r\n}\r\n\r\n@observer\r\nexport class ListRow extends React.Component<ListRowProps, ListRowState> {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            pressed: false,\r\n        }\r\n    }\r\n    render() {\r\n        let {date, main, vice, middle, midSize, icon, unread, right, onClick} = this.props;\r\n        let header, isIcon:boolean, noteNum;\r\n        if (unread !== undefined) {\r\n            let uv:number;\r\n            if (typeof unread === 'number') uv = unread;\r\n            else uv = unread.get();\r\n                if (uv > 0)\r\n                noteNum = <b>{uv}</b>;\r\n            else if (uv < 0)\r\n                noteNum = <b className='dot' />;\r\n        }\r\n        switch (typeof icon) {\r\n            case 'object':\r\n                header = <header>{icon}{noteNum}</header>; \r\n                isIcon= false;\r\n                break;\r\n            case 'string': \r\n                header = <header className='icon'><img src={icon as string} />{noteNum}</header>;\r\n                isIcon= true; \r\n                break;\r\n        }\r\n        let mid;\r\n        if (middle !== undefined) {\r\n            switch (typeof middle) {\r\n                case 'string':\r\n                    mid = <div style={{flex:midSize}}>{middle}</div>;\r\n                    break;\r\n                default:\r\n                    mid = middle;\r\n                    break;\r\n            }\r\n        }\r\n        let footer;\r\n        if (right !== undefined) {\r\n            if (typeof right === 'string')\r\n                footer = <footer><small className=\"text-muted\">{right}</small></footer>;\r\n            else\r\n                footer = <footer>{right}</footer>;\r\n        }\r\n        let viceSpan;\r\n        if (vice !== undefined) viceSpan = <span>{vice}</span>;\r\n        let cn = classNames('va-row', {icon:isIcon, pressed: this.state.pressed}, {\"va-action\": onClick !== undefined});\r\n        return (\r\n        <li className={cn} onClick={onClick}>\r\n            {header}\r\n            <div>\r\n                <div>{main}</div>\r\n                {viceSpan}\r\n            </div>\r\n            {mid}\r\n            {footer}\r\n        </li>\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport * as classNames from 'classnames';\r\nimport {observer} from 'mobx-react';\r\nimport {ListItem, ListRow} from './listRow';\r\n\r\nexport interface ListViewProps {\r\n    className?: string;\r\n    items?: any[];\r\n    renderRow?: (item:any, index:number, ex?:any) => JSX.Element;\r\n    ex?: any;\r\n    header?: string|JSX.Element;\r\n    beforeLoad?: string|JSX.Element;\r\n    none?: string|JSX.Element;\r\n    footer?: string|JSX.Element;\r\n    itemClick?: (item:any)=>void;\r\n    converter?: (item:any)=>ListItem;\r\n}\r\n\r\n@observer\r\nexport class ListView extends React.Component<ListViewProps, null> {\r\n    render() {\r\n        let {header, items, beforeLoad, none, renderRow, className, footer, itemClick, converter} = this.props;\r\n        let cn = classNames(className, 'va-list');\r\n        let content, elHeader;\r\n        if (items === undefined)\r\n            content = beforeLoad === null? null : <li className='empty'>\r\n                {beforeLoad || '...'}\r\n            </li>;\r\n        else if (items.length === 0) {\r\n            content = (\r\n            <li className='empty'>\r\n                {\r\n                    none || '[none]'\r\n                }\r\n            </li>);\r\n        }\r\n        else if (renderRow !== undefined) {\r\n            content = items.map((item, index) => renderRow(item, index, this.props.ex));\r\n        }\r\n        else {\r\n            content = items.map((item, index) => {\r\n                let onClick = item.onClick;\r\n                if (onClick === undefined && itemClick !== undefined) \r\n                    onClick = ()=>itemClick(item);\r\n                let listItem:ListItem;\r\n                if (converter !== undefined) {\r\n                    listItem = converter(item);\r\n                    if (listItem === undefined) return null;\r\n                }\r\n                else {\r\n                    listItem = {\r\n                        ...item\r\n                    }\r\n                }\r\n                if (listItem.key === undefined) listItem.key = listItem.main;\r\n                return <ListRow key={index} onClick={onClick} {...listItem} />;\r\n            });\r\n        }\r\n        if (header !== undefined) {\r\n            if (typeof header === 'string') {\r\n                elHeader = <div className='va-list-header'>{header}</div>;\r\n            }\r\n            else {\r\n                elHeader = header;\r\n            }\r\n        }\r\n\r\n        return (\r\n        <div className={cn}>\r\n            {elHeader}\r\n            <ul>\r\n                {content}\r\n            </ul>\r\n            {footer}\r\n        </div>\r\n        )\r\n    }\r\n}\r\n","export * from './form';\r\nexport * from './dropDownActions';\r\nexport * from './easyDate';\r\nexport * from './propGrid';\r\nexport * from './components';\r\nexport * from './media';\r\nexport * from './listView';\r\nexport * from './searchBox';\r\nexport * from './multiStep';\r\nexport * from './uid';\r\nexport * from './list';\r\n","const ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\nconst ID_LENGTH = 8;\r\n\r\nexport function uid():string {\r\n    let len = ALPHABET.length;\r\n    let rtn = '';\r\n    for (let i = 0; i < ID_LENGTH; i++) {\r\n        rtn += ALPHABET.charAt(Math.floor(Math.random() * len));\r\n    }\r\n    return rtn;\r\n}\r\n","import * as React from 'react';\r\nimport {observable, computed} from 'mobx';\r\nimport * as classNames from 'classnames';\r\nimport * as _ from 'lodash';\r\nimport {FormView} from '../formView';\r\nimport {Field} from '../field';\r\nimport {Face} from '../face';\r\nimport {Rule} from '../rule';\r\n\r\nexport abstract class ControlBase {\r\n    protected formView: FormView;\r\n    constructor(formView:FormView) {\r\n        this.formView = formView;\r\n    }\r\n    render():JSX.Element {\r\n        return <div className=\"col-sm-10\">\r\n            {this.renderControl()}\r\n        </div>;\r\n    }\r\n    protected abstract renderControl():JSX.Element;\r\n    @computed get hasError():boolean {return false;}\r\n    @computed get filled():boolean {return false;}\r\n    clear() {}\r\n    clearErrors() {}\r\n    readValues(values:any):any {}\r\n    setError(fieldName:string, error:string) {}\r\n    setInitValues(values: any) {}\r\n    isOk():boolean {this.validate(); return !this.hasError;}\r\n    protected validate() {}\r\n}\r\n\r\nexport abstract class Control extends ControlBase {\r\n    protected field: Field;\r\n    protected face: Face;\r\n    protected props: any;\r\n    protected rules: Rule[];\r\n\r\n    protected element: HTMLElement;\r\n    @observable protected isOK?: boolean;\r\n    @observable protected error: string;\r\n    @observable protected value: any;\r\n\r\n    constructor(formView:FormView, field:Field, face:Face) {\r\n        super(formView);\r\n        this.field = field;\r\n        this.face = face;\r\n        this.init();\r\n        this.setProps();\r\n    }\r\n    protected ref(element: HTMLElement) {\r\n        this.element = element;\r\n    }\r\n    protected init() {\r\n        this.rules = [];\r\n        let r = this.field.rules;\r\n        if (r !== undefined) {\r\n            if (Array.isArray(r) === true) this.rules.push(...(r as Rule[]));\r\n            else this.rules.push(r as Rule);\r\n        }\r\n    };\r\n    protected setProps():any {\r\n        return this.props = {\r\n            ref: this.ref.bind(this),\r\n            name: this.field.name,\r\n        }\r\n    };\r\n    @computed get hasError():boolean {return this.error !== undefined;}\r\n    @computed get filled():boolean {\r\n        let ret = this.value !== undefined && this.value !== this.field.defaultValue;\r\n        return ret;\r\n    }\r\n    clearValue() { this.value = undefined; }\r\n    clear() { this.clearErrors(); this.clearValue(); }\r\n    clearErrors() { this.isOK = undefined; this.error = undefined; }\r\n    readValues(values:any):any {\r\n        values[this.field.name] = this.value;\r\n    }\r\n    setError(fieldName:string, error:string) {}\r\n    setInitValues(values: any) {}\r\n    protected getValueFromElement():any {return this.value;}\r\n    protected validate() {\r\n        try {\r\n            let v = this.getValueFromElement();\r\n            if (this.rules.length > 0) {\r\n                let isOk:boolean;\r\n                for (let rule of this.rules) {\r\n                    console.log('validate: %s', v);\r\n                    let err = rule(v);\r\n                    console.log('validate: %s err: %s', v, err);\r\n                    if (err === true) {\r\n                        this.error = undefined;\r\n                        isOk = true;\r\n                    }\r\n                    else if (err !== undefined) {\r\n                        //console.log('field %s onBlur v=%s rule=%s err=%s', \r\n                        //    this.field.name, JSON.stringify(v), rule, err);\r\n                        this.error = err;\r\n                        this.isOK = false;\r\n                        return;\r\n                    }\r\n                }\r\n                this.isOK = isOk;\r\n            }\r\n            this.value = v;\r\n        }\r\n        catch (e) {\r\n            this.error = e.message;\r\n        }\r\n    }\r\n    render():JSX.Element {\r\n        let n;\r\n        if (this.face !== undefined) {\r\n            let {notes} = this.face;\r\n            if (notes !== undefined) n = <small className=\"text-muted\">{notes}</small>;\r\n        }\r\n        return <div className=\"col-sm-10\">\r\n            {this.renderControl()}\r\n            {n}\r\n        </div>;\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport {observable} from 'mobx';\r\nimport * as classNames from 'classnames';\r\nimport * as _ from 'lodash';\r\nimport {FormView} from '../formView';\r\nimport {Field} from '../field';\r\nimport {Face} from '../face';\r\nimport {ControlBase} from './control';\r\n\r\nexport class ButtonsControl extends ControlBase {\r\n    constructor(props) {\r\n        super(props);\r\n        this.otherClick = this.otherClick.bind(this);\r\n    }\r\n    private otherClick() {\r\n        let onOther = this.formView.props.onOther;\r\n        if (onOther === undefined) return;\r\n        let values = this.formView.readValues();\r\n        onOther(values);\r\n    }\r\n    renderControl():JSX.Element {\r\n        console.log('buttons.renderControl');\r\n        let nothing = this.formView.nothing;\r\n        let hasError = this.formView.hasError;\r\n        let props = this.formView.props;\r\n        console.log('buttons.renderControl nothing:%s hasError:%s', nothing, hasError);\r\n        let {submitButton, otherButton, onOther} = props;\r\n        let btnOther;\r\n        if (otherButton !== undefined) {\r\n            btnOther = <button className=\"btn btn-outline-info ml-auto\" onClick={this.otherClick}>\r\n                {otherButton}\r\n            </button>\r\n        }\r\n        return <div className=\"d-flex justify-content-start\">\r\n            <button\r\n                className=\"btn btn-primary\"\r\n                type=\"submit\" \r\n                disabled={nothing || hasError}>\r\n                {submitButton || '提交'}\r\n            </button>\r\n            {btnOther}\r\n        </div>;\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport {observable, computed} from 'mobx';\r\nimport * as classNames from 'classnames';\r\nimport * as _ from 'lodash';\r\nimport {FormView} from '../formView';\r\nimport {Field} from '../field';\r\nimport {Face, Placeholder} from '../face';\r\nimport {Control} from './control';\r\n\r\nconst TxtRequired = '必须填入要求内容';\r\n\r\nexport abstract class CharsControl extends Control {\r\n    protected init() {\r\n        super.init();\r\n        if (this.field.required === true) {\r\n            this.rules.push((v) => {\r\n                if (v===null || v===undefined || (v as string).trim().length === 0) return TxtRequired;\r\n                return true;\r\n            });\r\n        }\r\n    }\r\n\r\n    protected element: HTMLInputElement;\r\n    protected getValueFromElement():any {return this.parseValue(this.element.value)}\r\n\r\n    protected setProps() {\r\n        super.setProps();\r\n        _.assign(this.props, {\r\n            onBlur: this.onBlur.bind(this),\r\n            onFocus: this.onFocus.bind(this),\r\n            onChange: this.onChange.bind(this),\r\n        });\r\n        let face = this.face as Placeholder;\r\n        if (face !== undefined) {\r\n            _.assign(this.props, {\r\n                placeholder: face.placeholder,\r\n            });\r\n        }\r\n        return this.props;\r\n    };\r\n    protected parseValue(value?:string):any {return value;}\r\n    private onBlur() {\r\n        //console.log('field %s onBlure', this.field.name);\r\n        this.validate();\r\n    }\r\n    private onChange() {\r\n        console.log('onChange');\r\n        this.validate();\r\n    }\r\n    private onFocus() {\r\n        this.clearErrors();\r\n        //this.error = undefined;\r\n        //this.formView.clearErrors();\r\n    }\r\n    protected className() {\r\n        return classNames({\r\n            \"form-control\": true,\r\n            \"has-success\": this.isOK === true,\r\n            \"is-invalid\": this.error !== undefined,\r\n            \"is-valid\": this.error === undefined && this.isOK === true,\r\n        });\r\n    }\r\n    protected renderInput():JSX.Element {\r\n        return <input className={this.className()} {...this.props} />;\r\n    }\r\n    protected ref(element: HTMLInputElement) {\r\n        super.ref(element);\r\n        if (element) {\r\n            element.value = this.value === undefined? '':this.value;\r\n        }\r\n    }\r\n    protected renderError():JSX.Element {\r\n        //if (this.field.name === 'name') console.log('charsControl renderControl');\r\n        if (this.error === undefined) return null;\r\n        return <div className=\"invalid-feedback\">{this.error}</div>\r\n    }\r\n    clearValue() { super.clearValue(); this.element.value = ''; }\r\n    setError(fieldName:string, error:string) {\r\n        if (this.field.name === fieldName) this.error = error;\r\n    }\r\n    setInitValues(values: any) {\r\n        let v = values[this.field.name];\r\n        if (v === undefined) return;\r\n        //this.element.value = v;\r\n        this.value = v;\r\n    }\r\n    renderControl():JSX.Element {\r\n        return <React.Fragment>\r\n            {this.renderInput()}\r\n            {this.renderError()}\r\n        </React.Fragment>;\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport * as _ from 'lodash';\r\nimport {CharsControl} from './charsControl';\r\nimport {StringField} from '../field';\r\n\r\nexport class StringControl extends CharsControl {\r\n    protected field: StringField;\r\n    protected setProps() {\r\n        let p = super.setProps();\r\n        _.assign(p, {\r\n            type: 'text',\r\n            maxLength: this.field.maxLength,\r\n        });\r\n        return p;\r\n    };\r\n    protected parseValue(value?:string):any {\r\n        if (value === undefined) return undefined;\r\n        if (value.trim().length === 0) return undefined;\r\n        return value;\r\n    }\r\n}\r\n\r\nexport class PasswordControl extends StringControl {\r\n    protected setProps() {\r\n        let p = super.setProps();\r\n        _.assign(p, {\r\n            type: 'password',\r\n            maxLength: this.field.maxLength,\r\n        });\r\n        return p;\r\n    };\r\n}","import * as React from 'react';\r\nimport * as _ from 'lodash';\r\nimport {IntField, DecField, NumberField} from '../field';\r\nimport {CharsControl} from './charsControl';\r\n\r\nconst ErrInvalidNumber = '无效的数字';\r\nconst ErrMin = '最小值为';\r\nconst ErrMax = '最大值为';\r\n\r\nconst KeyCode_Neg = 45;\r\nconst KeyCode_Dot = 46;\r\n\r\nexport class NumberControl extends CharsControl {\r\n    protected field: IntField | DecField | NumberField;\r\n    protected value: number;\r\n    protected extraChars: number[];\r\n    \r\n    protected init() {\r\n        super.init();\r\n        this.extraChars = [];\r\n        let {min, max} = this.field;\r\n        if (min !== undefined) {\r\n            this.rules.push((v:number) => {if (v === undefined) return; if (v<min) return ErrMin + min; return true;});\r\n            if (min < 0) this.extraChars.push(KeyCode_Neg);\r\n        }\r\n        else {\r\n            this.extraChars.push(KeyCode_Neg);\r\n        }\r\n\r\n        if (max !== undefined) {\r\n            this.rules.push((v:number) => {if (v === undefined) return; if (v>max) return ErrMax + max; return true});\r\n        }\r\n        switch (this.field.type) {\r\n            case 'dec':\r\n            case 'number': this.extraChars.push(KeyCode_Dot); break;\r\n        }\r\n    }\r\n\r\n    protected parseValue(value?:string):any {\r\n        if (value === undefined) return undefined;\r\n        if (value.trim().length === 0) return undefined;\r\n        let n = Number.parseFloat(value);\r\n        if (isNaN(n)) throw new Error(ErrInvalidNumber);\r\n        return n;\r\n    }\r\n\r\n    protected setProps() {\r\n        super.setProps();\r\n        _.assign(this.props, {\r\n            type: 'number',\r\n            step: (this.field as DecField).step,\r\n            onKeyPress: this.onKeyPress.bind(this),\r\n        });\r\n    }\r\n\r\n    onKeyPress(event:KeyboardEvent) {\r\n        let ch = event.charCode;\r\n        if (ch === 8 || ch === 0 || ch === 13 || ch >= 48 && ch <= 57) return;\r\n        if (this.extraChars !== undefined) {\r\n            if (this.extraChars.indexOf(ch) >= 0) {\r\n                switch (ch) {\r\n                    case KeyCode_Dot: this.onKeyDot(); break;\r\n                    case KeyCode_Neg: this.onKeyNeg(); event.preventDefault(); break;\r\n                }\r\n                return;\r\n            }\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    private onKeyDot() {\r\n        let v = this.element.value;\r\n        let p = v.indexOf('.');\r\n        if (p >= 0) this.element.value = v.replace('.', '');\r\n    }\r\n    private onKeyNeg() {\r\n        let v = this.element.value;\r\n        let p = v.indexOf('-');\r\n        if (p >= 0) v = v.replace('-', '');\r\n        else v = '-'+v;\r\n        this.element.value = v;\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport {Control, ControlBase} from './control';\r\nimport {FormView} from '../formView';\r\n\r\nexport class UnknownControl extends Control {\r\n    renderControl():JSX.Element {\r\n        return <div className=\"form-control-plaintext\">\r\n            <div className=\"alert alert-primary\" role=\"alert\">\r\n            don't know how to create control<br/>\r\n            field: {JSON.stringify(this.field)} must be object <br/>\r\n            face: {JSON.stringify(this.face)} must be object <br/>\r\n            </div>\r\n        </div>;\r\n    }\r\n}\r\n\r\nexport class EmptyControl extends ControlBase {\r\n    private element:JSX.Element;\r\n    constructor(formView:FormView, element:JSX.Element) {\r\n        super(formView);\r\n        this.element = element;\r\n    }\r\n    renderControl():JSX.Element {\r\n        return <div className=\"form-control-plaintext\">\r\n            {this.element}\r\n        </div>;\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport {observable} from 'mobx';\r\nimport * as classNames from 'classnames';\r\nimport * as _ from 'lodash';\r\nimport {FormView} from '../formView';\r\nimport {Field} from '../field';\r\nimport {Face, IdPickFace} from '../face';\r\nimport {Control} from './control';\r\n\r\nexport class PickIdControl extends Control {\r\n    protected face: IdPickFace;\r\n    @observable private caption: string|JSX.Element;\r\n\r\n    private onClick = async () => {\r\n        let {pick, fromPicked} = this.face;\r\n        let item = await pick(this.face, this.formView.props, this.formView.readValues());\r\n        if (item === undefined) {\r\n            this.value = undefined;\r\n            return;\r\n        }\r\n        if (fromPicked === undefined) {\r\n            this.value = item.id;\r\n            return;\r\n        }\r\n        let {id, caption} = fromPicked(item);\r\n        this.value = id;\r\n        this.caption = caption;\r\n    }\r\n    onPicked = (value: any) => {\r\n        this.value = value.id;\r\n    }\r\n    setInitValues(values: any) {\r\n        let v = values[this.field.name];\r\n        this.value = v;\r\n    }\r\n    private controlContent():string|JSX.Element {\r\n        let {itemFromId, fromPicked, initCaption} = this.face;\r\n        if (this.value === undefined) {\r\n            return initCaption || '请选择Id';\r\n        }\r\n        if (this.caption !== undefined) {\r\n            return this.caption;\r\n        }\r\n        if (itemFromId !== undefined) {\r\n            if (fromPicked !== undefined) {\r\n                let item = itemFromId(this.value);\r\n                if (item) {\r\n                    let ret = fromPicked(item);\r\n                    if (ret !== undefined) return ret.caption;\r\n                }\r\n            }\r\n        }\r\n        return String(this.value);\r\n    }\r\n    /*\r\n    private buildContent():string|JSX.Element {\r\n        let {tuid, input} = this.face;\r\n        if (input === undefined) {\r\n            //return <div>no input on idpick</div>;\r\n            return <div onClick={this.onClick}>{this.controlContent()}</div>;\r\n        }\r\n        return <input.component id={this.value} \r\n            tuid={tuid}\r\n            input={input}\r\n            entitiesUI={this.formView.props.context} \r\n            params={this.formView.readValues()}\r\n            onPicked={this.onPicked} />;\r\n    }*/\r\n    renderControl():JSX.Element {\r\n        let {tuid, input} = this.face;\r\n        if (input === undefined) {\r\n            //return <div>no input on idpick</div>;\r\n            return <div className=\"form-control-plaintext px-2 border text-primary rounded cursor-pointer\"\r\n                onClick={this.onClick}>\r\n                {this.controlContent()}\r\n            </div>;\r\n        }\r\n        return <div className=\"form-control-static \">\r\n            <input.component id={this.value} \r\n                ui={tuid}\r\n                //input={input}\r\n                //entitiesUI={this.formView.props.context} \r\n                //params={this.formView.readValues()}\r\n                //onPicked={this.onPicked}\r\n                />\r\n        </div>;\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport {observable} from 'mobx';\r\nimport * as classNames from 'classnames';\r\nimport * as _ from 'lodash';\r\nimport {FormView} from '../formView';\r\nimport {Field} from '../field';\r\nimport {Face, TuidPickFace} from '../face';\r\nimport {Control} from './control';\r\n\r\nexport class PickTuidControl extends Control {\r\n    protected face: TuidPickFace;\r\n    // protected value: number;\r\n    @observable private caption: string|JSX.Element;\r\n    constructor(formView:FormView, field:Field, face:Face) {\r\n        super(formView, field, face);\r\n        this.onIdChanged = this.onIdChanged.bind(this);\r\n        //this.onClick = this.onClick.bind(this);\r\n    }\r\n    /*\r\n    private async onClick() {\r\n        let {pick, fromPicked} = this.face;\r\n        let item = await pick(this.face, this.formView.props, this.formView.readValues());\r\n        if (item === undefined) {\r\n            this.value = undefined;\r\n            return;\r\n        }\r\n        if (fromPicked === undefined) {\r\n            this.value = item.id;\r\n            return;\r\n        }\r\n        let {id, caption} = fromPicked(item);\r\n        this.value = id;\r\n        this.caption = caption;\r\n    }*/\r\n    onIdChanged(id: any) {\r\n        this.value = id.id;\r\n    }\r\n    setInitValues(values: any) {\r\n        let v = values[this.field.name];\r\n        this.value = v;\r\n    }\r\n    private buildContent():JSX.Element {\r\n        //let {tuid, input} = this.face;\r\n        return <this.face.input.component \r\n            {...this.face}\r\n            id={this.value}\r\n            //ui={this.face.ui}\r\n            //input={input}\r\n            //entitiesUI={this.formView.props.context} \r\n            onFormValues={()=>this.formView.readValues()}\r\n            onIdChanged={this.onIdChanged} />;\r\n    }\r\n    renderControl():JSX.Element {\r\n        return <div className=\"form-control-static \">\r\n            {this.buildContent()}\r\n        </div>;\r\n    }\r\n}\r\n/*\r\n<button className=\"form-control btn btn-outline-info\"\r\ntype=\"button\"\r\nstyle={{textAlign:'left', paddingLeft:'0.75rem'}}\r\nonClick={this.onClick}>\r\n{this.buildContent()}\r\n</button>\r\n*/","import * as React from 'react';\r\nimport {observable} from 'mobx';\r\nimport * as classNames from 'classnames';\r\nimport * as _ from 'lodash';\r\nimport {FormView} from '../formView';\r\nimport {Field} from '../field';\r\nimport {Face, PickFace} from '../face';\r\nimport {Control} from './control';\r\nimport { observer } from 'mobx-react';\r\n\r\nexport class PickControl extends Control {\r\n    protected face: PickFace;\r\n    @observable private caption: string|JSX.Element;\r\n\r\n    private onClick = async () => {\r\n        let {pick, fromPicked} = this.face;\r\n        let item = await pick(this.face, this.formView.props, this.formView.readValues());\r\n        if (item === undefined) {\r\n            this.value = undefined;\r\n            return;\r\n        }\r\n        let {id, caption} = fromPicked(item);\r\n        this.value = id;\r\n        this.caption = caption;\r\n    }\r\n    setInitValues(values: any) {\r\n        let v = values[this.field.name];\r\n        this.value = v;\r\n    }\r\n    /*\r\n    private controlContent():string|JSX.Element {\r\n        let {content: Content} = this.face;\r\n        if (this.value === undefined) {\r\n            return '请选择';\r\n        }\r\n        \r\n        if (this.caption !== undefined) {\r\n            return this.caption;\r\n        }\r\n        return <Content id={this.value} />;\r\n    }*/\r\n    /*\r\n    private buildContent():string|JSX.Element {\r\n        let {tuid, input} = this.face;\r\n        if (input === undefined) {\r\n            //return <div>no input on idpick</div>;\r\n            return <div onClick={this.onClick}>{this.controlContent()}</div>;\r\n        }\r\n        return <input.component id={this.value} \r\n            tuid={tuid}\r\n            input={input}\r\n            entitiesUI={this.formView.props.context} \r\n            params={this.formView.readValues()}\r\n            onPicked={this.onPicked} />;\r\n    }*/\r\n    renderControl():JSX.Element {\r\n        return <this.view />;\r\n        /*\r\n        let {content:Content} = this.face;\r\n        //if (this.value === undefined) {\r\n            //return <div>no input on idpick</div>;\r\n        //}\r\n        //return <div className=\"form-control-static \">\r\n        //    <Content />\r\n        //</div>;\r\n        */\r\n    }\r\n\r\n    private view = observer(() => {\r\n        let content;\r\n        let {content: Content} = this.face;\r\n        if (this.value === undefined || this.value === null) {\r\n            content = '请选择';\r\n        }\r\n        /*\r\n        else if (this.caption !== undefined) {\r\n            content = this.caption;\r\n        }*/\r\n        else {\r\n            content = <Content id={this.value} />;\r\n        } \r\n        return <div\r\n            className=\"form-control-plaintext px-2 border text-primary rounded cursor-pointer bg-light\"\r\n            onClick={this.onClick}>\r\n            {content}\r\n        </div>\r\n    });\r\n}\r\n","export * from './control';\r\nexport * from './buttonsControl';\r\nexport * from './stringControl';\r\nexport * from './numberControl';\r\n\r\nimport {Field} from '../field';\r\nimport {Face} from '../face';\r\nimport {Control, ControlBase} from './control';\r\nimport {ButtonsControl} from './buttonsControl';\r\nimport {CheckControl} from './checkControl';\r\nimport {RadioControl} from './radioControl';\r\nimport {TextAreaControl} from './textAreaControl';\r\nimport {SelectControl} from './selectControl';\r\nimport {UnknownControl, EmptyControl} from './unknownControl';\r\nimport {StringControl, PasswordControl} from './stringControl';\r\nimport {NumberControl} from './numberControl';\r\n\r\nimport {FormView, FormRow, GroupRow, FieldRow, LabelFormRow} from '../formView';\r\nimport { PickIdControl } from './pickIdControl';\r\nimport { PickTuidControl } from './pickTuidControl';\r\nimport { PickControl } from './pickControl';\r\n\r\nexport type CreateControl = (form:FormView, row: FormRow) => ControlBase\r\n\r\nexport const createControl:CreateControl = (form:FormView, row: LabelFormRow):ControlBase => {\r\n    let label = row.label;\r\n    if ((<GroupRow>row).group !== undefined)\r\n        return createGroupControl(form, label, row as GroupRow);\r\n    if ((<FieldRow>row).field !== undefined)\r\n        return createFieldControl(form, label, row as FieldRow);\r\n    return new EmptyControl(form, row.help);\r\n}\r\n\r\nconst controls:{[type:string]: new (formView:FormView, field:Field, face:Face) => Control} = {\r\n    \"string\": StringControl,\r\n    \"password\": PasswordControl,\r\n    \"number\": NumberControl,\r\n    \"checkbox\": CheckControl,\r\n    \"radiobox\": RadioControl,\r\n    \"select\": SelectControl,\r\n    \"pick-id\": PickIdControl,\r\n    \"pick-tuid\": PickTuidControl,\r\n    \"textarea\": TextAreaControl,\r\n    \"pick\": PickControl,\r\n};\r\nconst defaultFaces:{[type:string]: Face} = {\r\n    \"string\": {type:'string'},\r\n    \"number\": {type:'number'},\r\n    \"int\": {type:'number'},\r\n    \"dec\": {type:'number'},\r\n    \"bool\": {type:'checkbox'},\r\n}\r\nfunction createFieldControl(form:FormView, label:string, fieldRow: FieldRow):Control {\r\n    let {field, face} = fieldRow;\r\n    switch (typeof field) {\r\n        case 'string':\r\n            field = {\r\n                name: (field as any) as string,\r\n                type: 'string',\r\n            }\r\n            break;\r\n        case 'object':\r\n            break;\r\n        default:\r\n            return new UnknownControl(form, field, face);\r\n    }\r\n    let fieldType = field.type || 'string';\r\n    if (face === undefined) {\r\n        face = defaultFaces[fieldType];\r\n        if (face === undefined) return new UnknownControl(form, field, face);\r\n    }\r\n    else if (face.type === undefined) {\r\n        let f = defaultFaces[fieldType];\r\n        face.type = f===undefined? 'string' : f.type;\r\n    }\r\n    let control = controls[face.type || fieldType] || UnknownControl;\r\n    return new control(form, field, face);\r\n}\r\n\r\nfunction createGroupControl(form:FormView, label:string, groupRow: GroupRow):Control {\r\n    return new UnknownControl(form, groupRow as any, undefined);\r\n}\r\n","import * as React from 'react';\r\nimport {observable} from 'mobx';\r\nimport * as classNames from 'classnames';\r\nimport * as _ from 'lodash';\r\nimport {FormView} from '../formView';\r\nimport {Field, BoolField} from '../field';\r\nimport {Face, CheckBoxFace} from '../face';\r\nimport {Control} from './control';\r\n\r\nexport class CheckControl extends Control {    \r\n    protected element: HTMLInputElement;\r\n    protected field: BoolField;\r\n    protected face: CheckBoxFace;\r\n    private trueValue: any;\r\n    private falseValue: any;\r\n\r\n    protected init() {\r\n        super.init();\r\n        let {trueValue, falseValue} = this.field;\r\n        if (trueValue === undefined) this.trueValue = 1;\r\n        if (falseValue === undefined) this.falseValue = 0;\r\n    }\r\n\r\n    setProps() {\r\n        super.setProps();\r\n        _.assign(this.props, {\r\n            onChange: this.onChange.bind(this),\r\n        });\r\n    }\r\n\r\n    clearValue() {\r\n        this.element.checked = this.field.defaultValue === this.trueValue;\r\n        this.value = this.getValueFromElement();\r\n    }\r\n\r\n    setInitValues(values: any) {\r\n        let v = values[this.field.name];\r\n        if (v === undefined) {\r\n            v = this.field.defaultValue;\r\n        }\r\n        if (v !== undefined) {\r\n            //this.element.checked = v === this.trueValue;\r\n            //this.value = this.getValueFromElement();\r\n        }\r\n    }\r\n\r\n    protected getValueFromElement():any { return this.element.checked? this.trueValue:this.falseValue; }\r\n\r\n    private onChange() {\r\n        this.value = this.getValueFromElement();\r\n    }\r\n\r\n    renderControl():JSX.Element {\r\n        return <div className=\"form-control-static\">\r\n            <label className=\"form-control\">\r\n                <label className=\"custom-control custom-checkbox mb-0\">\r\n                    <input type='checkbox'\r\n                        name={this.field.name}\r\n                        ref={this.props.ref}\r\n                        onChange={this.props.onChange}\r\n                        className=\"custom-control-input\" />\r\n                    <span className=\"custom-control-indicator\" />\r\n                    <span className=\"custom-control-description\">{this.face.label}</span>\r\n                </label>\r\n            </label>\r\n        </div>;\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport {observable} from 'mobx';\r\nimport * as classNames from 'classnames';\r\nimport * as _ from 'lodash';\r\nimport {FormView} from '../formView';\r\nimport {Field} from '../field';\r\nimport {Face, RadioFace} from '../face';\r\nimport {Control} from './control';\r\n\r\nexport class RadioControl extends Control {\r\n    protected face: RadioFace;\r\n    renderControl():JSX.Element {\r\n        return <div className=\"form-control-static\">\r\n            <div className=\"form-control\">\r\n            {\r\n                this.face.list.map((item, index) => {\r\n                    let t, v;\r\n                    if (typeof item !== 'object') t = v = item;\r\n                    else {\r\n                        t = item.text;\r\n                        v = item.value;\r\n                    }\r\n                    return <label key={index} className=\"custom-control custom-radio w-25\">\r\n                        <input type='radio'\r\n                            name={this.field.name} \r\n                            className=\"custom-control-input\" />\r\n                        <span className=\"custom-control-indicator\" />\r\n                        <span className=\"custom-control-description\">{t}</span>\r\n                    </label>;\r\n                })\r\n            }\r\n            </div>\r\n        </div>;\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport {observable} from 'mobx';\r\nimport * as classNames from 'classnames';\r\nimport * as _ from 'lodash';\r\nimport {FormView} from '../formView';\r\nimport {Field} from '../field';\r\nimport {Face, SelectFace} from '../face';\r\nimport {Control} from './control';\r\n\r\nexport class SelectControl extends Control {\r\n    constructor (formView:FormView, field:Field, face:Face) {\r\n        super(formView, field, face);\r\n        this.ref = this.ref.bind(this);\r\n    }\r\n    protected face: SelectFace;\r\n    protected element: HTMLSelectElement;\r\n    protected getValueFromElement():any {\r\n        let {selectedIndex, selectedOptions} = this.element;\r\n        let v:any = selectedOptions[0].value;\r\n        switch (this.field.type) {\r\n            case 'number': v = Number(v); break;\r\n            case 'date': v = new Date(v); break;\r\n            case 'bool': \r\n                if (typeof v === 'string') {\r\n                    v = ((v as string).toLowerCase() === 'true');\r\n                }\r\n                break;\r\n        }\r\n        return v;\r\n    }\r\n    renderControl():JSX.Element {\r\n        let {list} = this.face;\r\n        let def = this.face.default;\r\n        let options: any[] = [];\r\n        if (def === undefined)\r\n            options.push(<option key={-1} value={undefined}>请选择</option>);\r\n        options.push(...list.map((item, index) => {\r\n            let t, v;\r\n            if (typeof item !== 'object') t = v = item;\r\n            else {\r\n                t = item.text;\r\n                v = item.value;\r\n            }\r\n            return <option key={index} value={v}>{t}</option>;\r\n        }));\r\n        return <div className=\"form-control-static\">\r\n            <select name={this.field.name} className=\"form-control\" ref={this.ref}>\r\n                {options}\r\n            </select>\r\n        </div>;\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport * as _ from 'lodash';\r\nimport {CharsControl} from './charsControl';\r\nimport {StringField} from '../field';\r\nimport {TextAreaFace} from '../face';\r\n\r\nexport class TextAreaControl extends CharsControl {\r\n    protected field: StringField;\r\n    protected face: TextAreaFace;\r\n    private el: HTMLTextAreaElement;\r\n    protected setProps() {\r\n        let p = super.setProps();\r\n        let {maxLength} = this.field;\r\n        let {rows} = this.face;\r\n        _.assign(p, {\r\n            maxLength: maxLength,\r\n            rows: rows,\r\n        });\r\n        return p;\r\n    };\r\n    protected renderInput():JSX.Element {\r\n        return <textarea ref={t=>{this.el = t;if (t!==undefined) t.value=''}} className={this.className()} {...this.props} />;\r\n    }\r\n}\r\n","export * from './rule';\r\nexport * from './field';\r\nexport * from './face';\r\nexport * from './rowContainer';\r\nexport * from './formView';\r\nexport * from './TonvaForm';\r\nexport {ControlBase} from './control';\r\n","import * as React from 'react';\r\nimport {FormView, FormRow, FieldRow, GroupRow, LabelFormRow} from '../formView';\r\nimport {Control, ControlBase, createControl, CreateControl} from '../control';\r\n\r\nexport type CreateRow = (form:FormView, row: FormRow)=>RowContainer;\r\n\r\nexport abstract class RowContainer {\r\n    protected form:FormView;\r\n    protected row: FormRow;\r\n    protected control: ControlBase;\r\n    constructor(form:FormView, row: FormRow) {\r\n        this.form = form;\r\n        this.row = row;\r\n        if ((row as JSX.Element).type === undefined) {\r\n            let cc:CreateControl = (row as LabelFormRow).createControl;\r\n            if (cc === undefined) cc = form.createControl;\r\n            if (cc === undefined) cc = createControl;\r\n            this.control = cc(form, row);\r\n        }\r\n    }\r\n    abstract render(key:string):JSX.Element;\r\n    \r\n    isOk():boolean {\r\n        if (this.control === undefined) return true;\r\n        return this.control.isOk();\r\n    }\r\n\r\n    contains(fieldName:string):boolean {\r\n        let field = (this.row as FieldRow).field;\r\n        if (field !== undefined) return fieldName === field.name;\r\n        let group = (this.row as GroupRow).group;\r\n        if (group !== undefined) return group.find(g => g.field.name === fieldName)!==undefined;\r\n        return false;\r\n    }\r\n    get hasError():boolean {return this.control.hasError;}\r\n    get filled():boolean {return this.control.filled;}\r\n    clear() {\r\n        if (this.control !== undefined) this.control.clear();\r\n    }\r\n    clearErrors() {\r\n        if (this.control !== undefined) this.control.clearErrors();\r\n    }\r\n    readValues(values:any):any {\r\n        if (this.control !== undefined) this.control.readValues(values);\r\n    }\r\n    setError(fieldName:string, error:string) {\r\n        if (this.control !== undefined) this.control.setError(fieldName, error);\r\n    }\r\n    setInitValues(values:any) {\r\n        if (this.control !== undefined) this.control.setInitValues(values);\r\n    }\r\n}\r\n\r\nclass ElementRowContainer extends RowContainer {\r\n    render(key:string):JSX.Element {\r\n        return <div key={key} className=\"form-group\">{this.row as JSX.Element}</div>;\r\n    }\r\n    get hasError():boolean {return false;}\r\n    get filled():boolean {return false;}\r\n}\r\n\r\nclass BootStrapRowContainer extends RowContainer {\r\n    render(key:string):JSX.Element {\r\n        return <div key={key} className='form-group row'>\r\n            <label className='col-sm-2 col-form-label'>\r\n                {(this.row as LabelFormRow).label}\r\n            </label>\r\n            {this.control.render()}\r\n        </div>;\r\n\r\n        //has-success is-valid\r\n    }\r\n}\r\n\r\nexport function bootstrapCreateRow(form:FormView, row: FormRow):RowContainer {\r\n    return new BootStrapRowContainer(form, row);\r\n}\r\n\r\nexport function elementCreateRow(form:FormView, row: FormRow):RowContainer {\r\n    return new ElementRowContainer(form, row);\r\n}\r\n","import * as React from 'react';\r\nimport {FormEvent} from 'react';\r\nimport {computed} from 'mobx';\r\nimport {uid} from '../uid';\r\nimport {Rule} from './rule';\r\nimport {Field} from './field';\r\nimport {Face} from './face';\r\nimport {CreateControl, ButtonsControl} from './control';\r\nimport {RowContainer, CreateRow, bootstrapCreateRow, elementCreateRow} from './rowContainer';\r\n\r\nexport interface FieldView {\r\n    field: Field;\r\n    face?: Face;\r\n}\r\n\r\nexport interface LabeledRow {\r\n    label?: string;\r\n    createRow?: CreateRow;\r\n    createControl?: CreateControl;\r\n    help?: JSX.Element;\r\n}\r\n\r\nexport interface FieldRow extends LabeledRow, FieldView {\r\n}\r\n\r\nexport interface GroupRow extends LabeledRow {\r\n    group: FieldView[];\r\n}\r\n\r\nexport type LabelFormRow = FieldRow|GroupRow|LabeledRow;\r\nexport type FormRow = LabelFormRow|JSX.Element;\r\n\r\nexport interface SubmitResult {\r\n    success: boolean;\r\n    message?: string\r\n    result?: any;\r\n}\r\n\r\nexport interface FormProps {\r\n    formRows: FormRow[];\r\n    //context?: any;              // form context，比如，可以是EntitiesUI\r\n    rules?: Rule | Rule[];\r\n    onSubmit: (values:any) => Promise<SubmitResult|undefined>;\r\n    submitButton?: string|JSX.Element;\r\n    otherButton?: string|JSX.Element;\r\n    onOther?: (values:any) => void;\r\n    createRow?: CreateRow;\r\n    createControl?: CreateControl;\r\n    readOnly?: boolean;\r\n}\r\n\r\nexport class FormView {\r\n    uid:string;\r\n    private rows: RowContainer[] = [];\r\n    private buttonsRow: RowContainer;\r\n    props: FormProps;\r\n    createControl?: CreateControl;\r\n    constructor(props:FormProps) {\r\n        this.uid = uid();\r\n        this.props = props;\r\n        this.buildRows(props);\r\n        this.createControl = props.createControl;\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n    @computed get hasError():boolean {\r\n        let ret = this.rows.map((v, index) => index + ': ' + v.hasError + '\\n');\r\n        console.log(ret);\r\n        return this.rows.some(row => row.hasError);\r\n    }\r\n    @computed get nothing():boolean {\r\n        let ret = this.rows.every(row => !row.filled);\r\n        return ret;\r\n    }\r\n\r\n    readValues():any {\r\n        let values = {} as any;\r\n        for (let row of this.rows) {\r\n            row.readValues(values);\r\n        }\r\n        return values;\r\n    }\r\n\r\n    clear() {\r\n        for (let row of this.rows) {\r\n            row.clear();\r\n        }\r\n    }\r\n\r\n    clearErrors() {\r\n        for (let row of this.rows) {\r\n            row.clearErrors();\r\n        }\r\n    }\r\n\r\n    setError(fieldName:string, error:string) {\r\n        for (let row of this.rows) {\r\n            row.setError(fieldName, error);\r\n        }\r\n    }\r\n\r\n    setInitValues(initValues:any) {\r\n        if (initValues === undefined) return;\r\n        for (let row of this.rows) {\r\n            row.setInitValues(initValues);\r\n        }\r\n    }\r\n\r\n    private buildRows(props:FormProps) {\r\n        let {formRows, createRow} = props;\r\n        if (formRows !== undefined) {\r\n            for (let row of formRows) {\r\n                this.rows.push(this.buildRow(row, createRow));\r\n            }\r\n            if (this.props.readOnly !== true) {\r\n                this.buttonsRow = this.buildRow({createControl:this.createButtons.bind(this)}, undefined);\r\n            }\r\n        }\r\n        else {\r\n            this.rows.push(elementCreateRow(this, <div className=\"text-warning\">TonvaForm need formRows defined</div>));\r\n        }\r\n    }\r\n\r\n    private buildRow(formRow: FormRow, formRowCreator: CreateRow):RowContainer {\r\n        let createRow:CreateRow;\r\n        let type = (formRow as JSX.Element).type;\r\n        if (type !== undefined) {\r\n            createRow = elementCreateRow;\r\n        }\r\n        else {\r\n            createRow = (formRow as (FieldRow | GroupRow | LabeledRow)).createRow;\r\n            if (createRow === undefined) {\r\n                createRow = formRowCreator;\r\n                if (createRow === undefined) createRow = bootstrapCreateRow;\r\n            }\r\n        }\r\n        let row = createRow(this, formRow);\r\n        return row;\r\n    }\r\n\r\n    private createButtons(form:FormView, row: FormRow) {\r\n        return new ButtonsControl(form);\r\n    }\r\n\r\n    private isOk():boolean {\r\n        let isOk = true;\r\n        for (let row of this.rows) {\r\n            if (!row.isOk()) isOk = false;\r\n        }\r\n        return isOk;\r\n    }\r\n\r\n    render():JSX.Element {\r\n        return <form onSubmit={this.onSubmit}>\r\n            {this.rows.map((row,index) => row.render(this.uid + index))}\r\n            {this.buttons()}\r\n        </form>;\r\n    }\r\n\r\n    buttons():JSX.Element {\r\n        if (this.buttonsRow === undefined) return;\r\n        return this.buttonsRow.render(this.uid + this.rows.length);\r\n    }\r\n    \r\n    async onSubmit(event:FormEvent<HTMLFormElement>) {\r\n        event.preventDefault();\r\n        if (!this.isOk()) return;\r\n        let values = this.readValues();\r\n        await this.props.onSubmit(values);\r\n    }\r\n}\r\n"],"sourceRoot":""}